From 8357e6b7ceca1bbf264bebba31185a6aa18bdca6 Mon Sep 17 00:00:00 2001
From: Valerii Chubar <valerii_chubar@epam.com>
Date: Wed, 6 Jan 2021 15:12:30 +0200
Subject: [PATCH] resolve local hostnames

---
 plugins/meta/dnsname/config.go       | 14 ++++----
 plugins/meta/dnsname/dnsname_test.go |  4 +--
 plugins/meta/dnsname/files.go        | 21 ++----------
 plugins/meta/dnsname/files_test.go   |  9 ++----
 plugins/meta/dnsname/main.go         | 48 ++++++++++++----------------
 plugins/meta/dnsname/service.go      |  3 +-
 6 files changed, 38 insertions(+), 61 deletions(-)

diff --git a/plugins/meta/dnsname/config.go b/plugins/meta/dnsname/config.go
index 4d1d59d..1bf0b2d 100644
--- a/plugins/meta/dnsname/config.go
+++ b/plugins/meta/dnsname/config.go
@@ -11,8 +11,10 @@ import (
 const (
 	// confFileName is the name of the dns masq conf file
 	confFileName = "dnsmasq.conf"
-	// hostsFileName is the name of the addnhosts file
-	hostsFileName = "addnhosts"
+
+    // Prefix to the directory where hostnames are stored
+	hostDirPrefix = "/hosts"
+
 	// pidFileName is the file where the dnsmasq file is stored
 	pidFileName = "pidfile"
 )
@@ -21,15 +23,13 @@ const dnsMasqTemplate = `## WARNING: THIS IS AN AUTOGENERATED FILE
 ## AND SHOULD NOT BE EDITED MANUALLY AS IT
 ## LIKELY TO AUTOMATICALLY BE REPLACED.
 strict-order
-local=/{{.Domain}}/
-domain={{.Domain}}
 expand-hosts
 pid-file={{.PidFile}}
 except-interface=lo
 bind-dynamic
 no-hosts
 interface={{.NetworkInterface}}
-addn-hosts={{.AddOnHostsFile}}`
+hostsdir={{.HostsDir}}`
 
 var (
 	// ErrBinaryNotFound means that the dnsmasq binary was not found
@@ -42,6 +42,7 @@ var (
 type DNSNameConf struct {
 	types.NetConf
 	DomainName    string   `json:"domainName"`
+	Hosts       []string   `json:"hostNames"`
 	RuntimeConfig struct { // The capability arg
 		Aliases map[string][]string `json:"aliases"`
 	} `json:"runtimeConfig,omitempty"`
@@ -49,7 +50,8 @@ type DNSNameConf struct {
 
 // dnsNameFile describes the plugin's attributes
 type dnsNameFile struct {
-	AddOnHostsFile   string
+	HostsDir         string
+	HostsFileName    string
 	Binary           string
 	ConfigFile       string
 	Domain           string
diff --git a/plugins/meta/dnsname/dnsname_test.go b/plugins/meta/dnsname/dnsname_test.go
index 5bc4032..b6f5f6f 100644
--- a/plugins/meta/dnsname/dnsname_test.go
+++ b/plugins/meta/dnsname/dnsname_test.go
@@ -30,7 +30,7 @@ var _ = Describe("dnsname tests", func() {
   "cniVersion": "0.4.0",
   "name": "test",
   "type": "dnsname",
-  "domainName": "foobar.io",
+  "hostNames": ["a98552ab-c445-46c8-9538-f7278e24760a", "cont1.SP1"],
   "prevResult": {
     "cniVersion": "0.4.0",
     "interfaces": [
@@ -116,7 +116,7 @@ var _ = Describe("dnsname tests", func() {
 			// Check that all configuration files are created
 			files, err := ioutil.ReadDir("/run/containers/cni/dnsname/test")
 			Expect(err).To(BeNil())
-			expectedFileNames := []string{"addnhosts", "dnsmasq.conf", "lock", "pidfile"}
+			expectedFileNames := []string{"dnsmasq.conf", "lock", "pidfile"}
 			var resultingFileNames []string
 			for _, f := range files {
 				resultingFileNames = append(resultingFileNames, f.Name())
diff --git a/plugins/meta/dnsname/files.go b/plugins/meta/dnsname/files.go
index 9c1c154..c73887f 100644
--- a/plugins/meta/dnsname/files.go
+++ b/plugins/meta/dnsname/files.go
@@ -11,7 +11,6 @@ import (
 	"text/template"
 
 	"github.com/containernetworking/plugins/plugins/ipam/host-local/backend/disk"
-	"github.com/coreos/go-iptables/iptables"
 	"github.com/sirupsen/logrus"
 )
 
@@ -54,20 +53,6 @@ func checkForDNSMasqConfFile(conf dnsNameFile) error {
 	if err != nil {
 		return err
 	}
-	ip, err := iptables.New()
-	if err != nil {
-		return err
-	}
-	args := []string{"-i", conf.NetworkInterface, "-p", "udp", "-m", "udp", "--dport", "53", "-j", "ACCEPT"}
-	exists, err := ip.Exists("filter", "INPUT", args...)
-	if err != nil {
-		return err
-	}
-	if !exists {
-		if err := ip.Insert("filter", "INPUT", 1, args...); err != nil {
-			return err
-		}
-	}
 	// Generate the template and compile it.
 	return ioutil.WriteFile(conf.ConfigFile, newConfig, 0700)
 }
@@ -112,7 +97,7 @@ func appendToFile(path, podname string, aliases []string, ips []*net.IPNet) erro
 }
 
 // removeLineFromFile removes a given entry from the dnsmasq host file
-func removeFromFile(path, podname string) (bool, error) {
+func removeFromFile(path string, hostNames[]string) (bool, error) {
 	var (
 		keepers []string
 		found   bool
@@ -140,7 +125,7 @@ func removeFromFile(path, podname string) (bool, error) {
 		fields := strings.Fields(oldFile.Text())
 		// if the IP of the entry and the given IP dont match, it should
 		// go into the new file
-		if len(fields) > 1 && fields[1] != podname {
+		if len(fields) > 1 && !stringInSlice(fields[1], hostNames) {
 			keepers = append(keepers, fmt.Sprintf("%s\n", oldFile.Text()))
 			continue
 		}
@@ -148,7 +133,7 @@ func removeFromFile(path, podname string) (bool, error) {
 	}
 	if !found {
 		// We never found a matching record; non-fatal
-		logrus.Debugf("a record for %s was never found in %s", podname, path)
+		logrus.Debugf("a record was never found in %s", path)
 	}
 	fileLength, err := writeFile(path, keepers)
 	if err != nil {
diff --git a/plugins/meta/dnsname/files_test.go b/plugins/meta/dnsname/files_test.go
index e86dcc4..ca34655 100644
--- a/plugins/meta/dnsname/files_test.go
+++ b/plugins/meta/dnsname/files_test.go
@@ -10,24 +10,21 @@ func Test_generateDNSMasqConfig(t *testing.T) {
 ## AND SHOULD NOT BE EDITED MANUALLY AS IT
 ## LIKELY TO AUTOMATICALLY BE REPLACED.
 strict-order
-local=/foobar.org/
-domain=foobar.org
 expand-hosts
 pid-file=/run/containers/cni/dnsname/cni0/pidfile
 except-interface=lo
-bind-dynamic
+bind-interfaces
 no-hosts
 interface=cni0
-addn-hosts=/run/containers/cni/dnsname/cni0/addnhosts
+hostsdir=/run/containers/cni/dnsname/hosts
 `
 
 	testConfig := dnsNameFile{
-		AddOnHostsFile:   makePath("cni0", hostsFileName),
 		Binary:           "/usr/bin/foo",
 		ConfigFile:       makePath("cni0", confFileName),
-		Domain:           "foobar.org",
 		NetworkInterface: "cni0",
 		PidFile:          makePath("cni0", pidFileName),
+		HostsDir:         filepath.Dir(makePath(hostDirPrefix, "network1")),
 	}
 	type args struct {
 		config dnsNameFile
diff --git a/plugins/meta/dnsname/main.go b/plugins/meta/dnsname/main.go
index c81e1dd..b8d150f 100644
--- a/plugins/meta/dnsname/main.go
+++ b/plugins/meta/dnsname/main.go
@@ -27,6 +27,7 @@
 package main
 
 import (
+	"bytes"
 	"encoding/json"
 	"io/ioutil"
 	"os"
@@ -68,6 +69,12 @@ func cmdAdd(args *skel.CmdArgs) error {
 			return makeDirErr
 		}
 	}
+	hostsDir := filepath.Dir(dnsNameConf.HostsFileName)
+	if _, err := os.Stat(hostsDir); os.IsNotExist(err) {
+		if makeDirErr := os.MkdirAll(hostsDir, 0700); makeDirErr != nil {
+			return makeDirErr
+		}
+	}
 	// we use the configuration directory for our locking mechanism but read/write and hup
 	lock, err := getLock(domainBaseDir)
 	if err != nil {
@@ -78,14 +85,13 @@ func cmdAdd(args *skel.CmdArgs) error {
 	}
 	defer func() {
 		if err := lock.release(); err != nil {
-			logrus.Errorf("unable to release lock for %q: %v", dnsNameConf.AddOnHostsFile, err)
+			logrus.Errorf("unable to release lock for %q: %v", dnsNameConf.HostsFileName, err)
 		}
 	}()
 	if err := checkForDNSMasqConfFile(dnsNameConf); err != nil {
 		return err
 	}
-	aliases := netConf.RuntimeConfig.Aliases[netConf.Name]
-	if err := appendToFile(dnsNameConf.AddOnHostsFile, podname, aliases, ips); err != nil {
+	if err := appendToFile(dnsNameConf.HostsFileName, podname, netConf.Hosts, ips); err != nil {
 		return err
 	}
 	// Now we need to HUP
@@ -107,7 +113,7 @@ func cmdDel(args *skel.CmdArgs) error {
 	if err := findDNSMasq(); err != nil {
 		return ErrBinaryNotFound
 	}
-	netConf, result, podname, err := parseConfig(args.StdinData, args.Args)
+	netConf, result, _, err := parseConfig(args.StdinData, args.Args)
 	if err != nil {
 		return errors.Wrap(err, "failed to parse config")
 	} else if result == nil {
@@ -131,7 +137,7 @@ func cmdDel(args *skel.CmdArgs) error {
 			logrus.Errorf("unable to release lock for %q: %v", domainBaseDir, err)
 		}
 	}()
-	shouldHUP, err := removeFromFile(filepath.Join(domainBaseDir, hostsFileName), podname)
+	shouldHUP, err := removeFromFile(dnsNameConf.HostsFileName, netConf.Hosts)
 	if err != nil {
 		return err
 	}
@@ -149,9 +155,6 @@ func main() {
 }
 
 func cmdCheck(args *skel.CmdArgs) error {
-	var (
-		conffiles []string
-	)
 	if err := findDNSMasq(); err != nil {
 		return ErrBinaryNotFound
 	}
@@ -192,19 +195,16 @@ func cmdCheck(args *skel.CmdArgs) error {
 	if !isRunning(pid) {
 		return errors.Errorf("dnsmasq instance not running")
 	}
-	// Above will make sure the pidfile exists
-	files, err := ioutil.ReadDir(dnsNameConfPath())
+
+	hosts, err := ioutil.ReadFile(dnsNameConf.HostsFileName)
 	if err != nil {
 		return err
 	}
-	for _, f := range files {
-		conffiles = append(conffiles, f.Name())
-	}
-	if !stringInSlice("addnhosts", conffiles) {
-		return errors.Errorf("addnhost file missing from configuration")
-	}
-	if !stringInSlice("dnsmasq.conf", conffiles) {
-		return errors.Errorf("dnsmasq.conf file missing from configuration")
+
+	for _, host := range netConf.Hosts{
+		if !bytes.Contains(hosts, []byte(host)){
+			return errors.Errorf("HostNames file does not contain %s", host)
+		}
 	}
 	return nil
 }
@@ -220,11 +220,6 @@ func stringInSlice(s string, slice []string) bool {
 	return false
 }
 
-type podname struct {
-	types.CommonArgs
-	K8S_POD_NAME types.UnmarshallableString `json:"podname,omitempty"`
-}
-
 // parseConfig parses the supplied configuration (and prevResult) from stdin.
 func parseConfig(stdin []byte, args string) (*DNSNameConf, *current.Result, string, error) {
 	conf := DNSNameConf{}
@@ -244,11 +239,8 @@ func parseConfig(stdin []byte, args string) (*DNSNameConf, *current.Result, stri
 			return nil, nil, "", errors.Wrap(err, "could not convert result to current version")
 		}
 	}
-	e := podname{}
-	if err := types.LoadArgs(args, &e); err != nil {
-		return nil, nil, "", err
-	}
-	return &conf, result, string(e.K8S_POD_NAME), nil
+
+	return &conf, result, "", nil
 }
 
 func findDNSMasq() error {
diff --git a/plugins/meta/dnsname/service.go b/plugins/meta/dnsname/service.go
index 717d6c0..5ec1d2b 100644
--- a/plugins/meta/dnsname/service.go
+++ b/plugins/meta/dnsname/service.go
@@ -21,11 +21,12 @@ func newDNSMasqFile(domainName, networkInterface, networkName string) (dnsNameFi
 		return dnsNameFile{}, errors.Errorf("the dnsmasq cni plugin requires the dnsmasq binary be in PATH")
 	}
 	masqConf := dnsNameFile{
+		HostsDir:         filepath.Dir(makePath(hostDirPrefix, networkName)),
+		HostsFileName:    makePath(hostDirPrefix, networkName),
 		ConfigFile:       makePath(networkName, confFileName),
 		Domain:           domainName,
 		PidFile:          makePath(networkName, pidFileName),
 		NetworkInterface: networkInterface,
-		AddOnHostsFile:   makePath(networkName, hostsFileName),
 		Binary:           dnsMasqBinary,
 	}
 	return masqConf, nil
-- 
2.17.1

